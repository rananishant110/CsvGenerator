{"ast":null,"code":"/**\n * Download processed order results as a CSV file\n * @param {Object} results - The processing results from the backend\n */\nexport const downloadCSV = results => {\n  if (!results || !results.mapped_items) {\n    console.error('No results to download');\n    return;\n  }\n  try {\n    // Create CSV content\n    const csvContent = generateCSVContent(results);\n\n    // Create and download the file\n    const blob = new Blob([csvContent], {\n      type: 'text/csv;charset=utf-8;'\n    });\n    const link = document.createElement('a');\n    if (link.download !== undefined) {\n      // Create download link\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', `order_results_${new Date().toISOString().split('T')[0]}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    } else {\n      // Fallback for older browsers\n      const csvContentWithBOM = '\\uFEFF' + csvContent;\n      const dataStr = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csvContentWithBOM);\n      window.open(dataStr);\n    }\n  } catch (error) {\n    console.error('Error downloading CSV:', error);\n    alert('Error downloading CSV file. Please try again.');\n  }\n};\n\n/**\n * Generate CSV content from processing results\n * @param {Object} results - The processing results\n * @returns {string} CSV content as a string\n */\nconst generateCSVContent = results => {\n  const {\n    mapped_items,\n    unmapped_items,\n    total_items,\n    processing_time\n  } = results;\n\n  // CSV headers - Only the 3 essential fields\n  const headers = ['Item Code', 'Item Name', 'Quantity'];\n\n  // CSV rows for mapped items - Only the 3 essential fields\n  const mappedRows = mapped_items.map(item => [item.item_code || '', item.item_name || '', item.quantity || '']);\n\n  // CSV rows for unmapped items - Only the 3 essential fields\n  const unmappedRows = unmapped_items.map(item => ['',\n  // No item code\n  item.original_text || '', item.quantity || '']);\n\n  // Combine all rows\n  const allRows = [headers, ...mappedRows, ...unmappedRows];\n\n  // Convert to CSV format\n  const csvContent = allRows.map(row => row.map(cell => {\n    // Escape quotes and wrap in quotes if contains comma, quote, or newline\n    const escapedCell = String(cell).replace(/\"/g, '\"\"');\n    if (escapedCell.includes(',') || escapedCell.includes('\"') || escapedCell.includes('\\n')) {\n      return `\"${escapedCell}\"`;\n    }\n    return escapedCell;\n  }).join(',')).join('\\n');\n  return csvContent;\n};\n\n/**\n * Preview CSV content in console (for debugging)\n * @param {Object} results - The processing results\n */\nexport const previewCSV = results => {\n  if (!results || !results.mapped_items) {\n    console.log('No results to preview');\n    return;\n  }\n  const csvContent = generateCSVContent(results);\n  console.log('CSV Preview:');\n  console.log(csvContent);\n};\n\n/**\n * Get CSV file size estimate\n * @param {Object} results - The processing results\n * @returns {string} Estimated file size\n */\nexport const getCSVSizeEstimate = results => {\n  if (!results || !results.mapped_items) {\n    return '0 KB';\n  }\n  const csvContent = generateCSVContent(results);\n  const sizeInBytes = new Blob([csvContent]).size;\n  const sizeInKB = (sizeInBytes / 1024).toFixed(1);\n  if (sizeInKB < 1024) {\n    return `${sizeInKB} KB`;\n  } else {\n    const sizeInMB = (sizeInKB / 1024).toFixed(2);\n    return `${sizeInMB} MB`;\n  }\n};","map":{"version":3,"names":["downloadCSV","results","mapped_items","console","error","csvContent","generateCSVContent","blob","Blob","type","link","document","createElement","download","undefined","url","URL","createObjectURL","setAttribute","Date","toISOString","split","style","visibility","body","appendChild","click","removeChild","revokeObjectURL","csvContentWithBOM","dataStr","encodeURIComponent","window","open","alert","unmapped_items","total_items","processing_time","headers","mappedRows","map","item","item_code","item_name","quantity","unmappedRows","original_text","allRows","row","cell","escapedCell","String","replace","includes","join","previewCSV","log","getCSVSizeEstimate","sizeInBytes","size","sizeInKB","toFixed","sizeInMB"],"sources":["/Users/neelam/Desktop/apps/Csvgenie/frontend/src/utils/csvUtils.js"],"sourcesContent":["/**\n * Download processed order results as a CSV file\n * @param {Object} results - The processing results from the backend\n */\nexport const downloadCSV = (results) => {\n  if (!results || !results.mapped_items) {\n    console.error('No results to download');\n    return;\n  }\n\n  try {\n    // Create CSV content\n    const csvContent = generateCSVContent(results);\n    \n    // Create and download the file\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    \n    if (link.download !== undefined) {\n      // Create download link\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', `order_results_${new Date().toISOString().split('T')[0]}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    } else {\n      // Fallback for older browsers\n      const csvContentWithBOM = '\\uFEFF' + csvContent;\n      const dataStr = 'data:text/csv;charset=utf-8,' + encodeURIComponent(csvContentWithBOM);\n      window.open(dataStr);\n    }\n  } catch (error) {\n    console.error('Error downloading CSV:', error);\n    alert('Error downloading CSV file. Please try again.');\n  }\n};\n\n/**\n * Generate CSV content from processing results\n * @param {Object} results - The processing results\n * @returns {string} CSV content as a string\n */\nconst generateCSVContent = (results) => {\n  const { mapped_items, unmapped_items, total_items, processing_time } = results;\n\n  // CSV headers - Only the 3 essential fields\n  const headers = [\n    'Item Code',\n    'Item Name',\n    'Quantity'\n  ];\n\n  // CSV rows for mapped items - Only the 3 essential fields\n  const mappedRows = mapped_items.map(item => [\n    item.item_code || '',\n    item.item_name || '',\n    item.quantity || ''\n  ]);\n\n  // CSV rows for unmapped items - Only the 3 essential fields\n  const unmappedRows = unmapped_items.map(item => [\n    '', // No item code\n    item.original_text || '',\n    item.quantity || ''\n  ]);\n\n  // Combine all rows\n  const allRows = [headers, ...mappedRows, ...unmappedRows];\n\n  // Convert to CSV format\n  const csvContent = allRows\n    .map(row =>\n      row.map(cell => {\n        // Escape quotes and wrap in quotes if contains comma, quote, or newline\n        const escapedCell = String(cell).replace(/\"/g, '\"\"');\n        if (escapedCell.includes(',') || escapedCell.includes('\"') || escapedCell.includes('\\n')) {\n          return `\"${escapedCell}\"`;\n        }\n        return escapedCell;\n      }).join(',')\n    )\n    .join('\\n');\n\n  return csvContent;\n};\n\n/**\n * Preview CSV content in console (for debugging)\n * @param {Object} results - The processing results\n */\nexport const previewCSV = (results) => {\n  if (!results || !results.mapped_items) {\n    console.log('No results to preview');\n    return;\n  }\n  \n  const csvContent = generateCSVContent(results);\n  console.log('CSV Preview:');\n  console.log(csvContent);\n};\n\n/**\n * Get CSV file size estimate\n * @param {Object} results - The processing results\n * @returns {string} Estimated file size\n */\nexport const getCSVSizeEstimate = (results) => {\n  if (!results || !results.mapped_items) {\n    return '0 KB';\n  }\n  \n  const csvContent = generateCSVContent(results);\n  const sizeInBytes = new Blob([csvContent]).size;\n  const sizeInKB = (sizeInBytes / 1024).toFixed(1);\n  \n  if (sizeInKB < 1024) {\n    return `${sizeInKB} KB`;\n  } else {\n    const sizeInMB = (sizeInKB / 1024).toFixed(2);\n    return `${sizeInMB} MB`;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}