{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  // 30 seconds\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  console.log(`API Response: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  console.error('API Response Error:', error);\n  if (error.response) {\n    // Server responded with error status\n    console.error('Error Data:', error.response.data);\n    console.error('Error Status:', error.response.status);\n  } else if (error.request) {\n    // Request made but no response received\n    console.error('No response received:', error.request);\n  } else {\n    // Something else happened\n    console.error('Error setting up request:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n/**\n * Process an order file by uploading it to the backend\n * @param {FormData} formData - Form data containing the file\n * @param {Function} onProgress - Progress callback function\n * @returns {Promise<Object>} Processing results\n */\nexport const processOrderFile = async (formData, onProgress) => {\n  try {\n    // Simulate progress for better UX\n    let progress = 0;\n    const progressInterval = setInterval(() => {\n      progress += Math.random() * 20;\n      if (progress > 90) progress = 90;\n      onProgress(Math.min(progress, 90));\n    }, 200);\n    const response = await api.post('/upload-order-file', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: progressEvent => {\n        if (progressEvent.total) {\n          const uploadProgress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          onProgress(uploadProgress);\n        }\n      }\n    });\n    clearInterval(progressInterval);\n    onProgress(100);\n    return response.data;\n  } catch (error) {\n    console.error('Error processing order file:', error);\n    throw error;\n  }\n};\n\n/**\n * Get catalog information from the backend\n * @returns {Promise<Object>} Catalog statistics\n */\nexport const getCatalogInfo = async () => {\n  try {\n    const response = await api.get('/catalog/summary');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching catalog info:', error);\n    throw error;\n  }\n};\n\n/**\n * Reload the catalog from Excel files\n * @returns {Promise<Object>} Reload results\n */\nexport const reloadCatalog = async () => {\n  try {\n    const response = await api.post('/catalog/reload');\n    return response.data;\n  } catch (error) {\n    console.error('Error reloading catalog:', error);\n    throw error;\n  }\n};\n\n/**\n * Get the full catalog data\n * @returns {Promise<Object>} Full catalog data\n */\nexport const getFullCatalog = async () => {\n  try {\n    const response = await api.get('/catalog');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching full catalog:', error);\n    throw error;\n  }\n};\n\n/**\n * Check backend health status\n * @returns {Promise<Object>} Health status\n */\nexport const checkHealth = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    console.error('Error checking health:', error);\n    throw error;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","message","processOrderFile","formData","onProgress","progress","progressInterval","setInterval","Math","random","min","post","onUploadProgress","progressEvent","total","uploadProgress","round","loaded","clearInterval","getCatalogInfo","get","reloadCatalog","getFullCatalog","checkHealth"],"sources":["/Users/neelam/Desktop/apps/Csvgenie/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000, // 30 seconds\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor for logging\napi.interceptors.request.use(\n  (config) => {\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napi.interceptors.response.use(\n  (response) => {\n    console.log(`API Response: ${response.status} ${response.config.url}`);\n    return response;\n  },\n  (error) => {\n    console.error('API Response Error:', error);\n    if (error.response) {\n      // Server responded with error status\n      console.error('Error Data:', error.response.data);\n      console.error('Error Status:', error.response.status);\n    } else if (error.request) {\n      // Request made but no response received\n      console.error('No response received:', error.request);\n    } else {\n      // Something else happened\n      console.error('Error setting up request:', error.message);\n    }\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Process an order file by uploading it to the backend\n * @param {FormData} formData - Form data containing the file\n * @param {Function} onProgress - Progress callback function\n * @returns {Promise<Object>} Processing results\n */\nexport const processOrderFile = async (formData, onProgress) => {\n  try {\n    // Simulate progress for better UX\n    let progress = 0;\n    const progressInterval = setInterval(() => {\n      progress += Math.random() * 20;\n      if (progress > 90) progress = 90;\n      onProgress(Math.min(progress, 90));\n    }, 200);\n\n    const response = await api.post('/upload-order-file', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      onUploadProgress: (progressEvent) => {\n        if (progressEvent.total) {\n          const uploadProgress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n          onProgress(uploadProgress);\n        }\n      },\n    });\n\n    clearInterval(progressInterval);\n    onProgress(100);\n\n    return response.data;\n  } catch (error) {\n    console.error('Error processing order file:', error);\n    throw error;\n  }\n};\n\n/**\n * Get catalog information from the backend\n * @returns {Promise<Object>} Catalog statistics\n */\nexport const getCatalogInfo = async () => {\n  try {\n    const response = await api.get('/catalog/summary');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching catalog info:', error);\n    throw error;\n  }\n};\n\n/**\n * Reload the catalog from Excel files\n * @returns {Promise<Object>} Reload results\n */\nexport const reloadCatalog = async () => {\n  try {\n    const response = await api.post('/catalog/reload');\n    return response.data;\n  } catch (error) {\n    console.error('Error reloading catalog:', error);\n    throw error;\n  }\n};\n\n/**\n * Get the full catalog data\n * @returns {Promise<Object>} Full catalog data\n */\nexport const getFullCatalog = async () => {\n  try {\n    const response = await api.get('/catalog');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching full catalog:', error);\n    throw error;\n  }\n};\n\n/**\n * Check backend health status\n * @returns {Promise<Object>} Health status\n */\nexport const checkHealth = async () => {\n  try {\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    console.error('Error checking health:', error);\n    throw error;\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}